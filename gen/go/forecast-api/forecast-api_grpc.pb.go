// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: forecast-api/forecast-api.proto

package forecast_api1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ForecastAPI_Forecast_FullMethodName                  = "/forecast_api.ForecastAPI/Forecast"
	ForecastAPI_StreamForecast_FullMethodName            = "/forecast_api.ForecastAPI/StreamForecast"
	ForecastAPI_AddServerToScheduler_FullMethodName      = "/forecast_api.ForecastAPI/AddServerToScheduler"
	ForecastAPI_RemoveServerFromScheduler_FullMethodName = "/forecast_api.ForecastAPI/RemoveServerFromScheduler"
	ForecastAPI_RemoveModel_FullMethodName               = "/forecast_api.ForecastAPI/RemoveModel"
)

// ForecastAPIClient is the client API for ForecastAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForecastAPIClient interface {
	Forecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)
	StreamForecast(ctx context.Context, in *ForecastStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ForecastPoint], error)
	AddServerToScheduler(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*AddServerResponse, error)
	RemoveServerFromScheduler(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*RemoveServerResponse, error)
	RemoveModel(ctx context.Context, in *RemoveModelRequest, opts ...grpc.CallOption) (*RemoveModelResponse, error)
}

type forecastAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewForecastAPIClient(cc grpc.ClientConnInterface) ForecastAPIClient {
	return &forecastAPIClient{cc}
}

func (c *forecastAPIClient) Forecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForecastResponse)
	err := c.cc.Invoke(ctx, ForecastAPI_Forecast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastAPIClient) StreamForecast(ctx context.Context, in *ForecastStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ForecastPoint], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ForecastAPI_ServiceDesc.Streams[0], ForecastAPI_StreamForecast_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ForecastStreamRequest, ForecastPoint]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ForecastAPI_StreamForecastClient = grpc.ServerStreamingClient[ForecastPoint]

func (c *forecastAPIClient) AddServerToScheduler(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*AddServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddServerResponse)
	err := c.cc.Invoke(ctx, ForecastAPI_AddServerToScheduler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastAPIClient) RemoveServerFromScheduler(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*RemoveServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveServerResponse)
	err := c.cc.Invoke(ctx, ForecastAPI_RemoveServerFromScheduler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastAPIClient) RemoveModel(ctx context.Context, in *RemoveModelRequest, opts ...grpc.CallOption) (*RemoveModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveModelResponse)
	err := c.cc.Invoke(ctx, ForecastAPI_RemoveModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForecastAPIServer is the server API for ForecastAPI service.
// All implementations must embed UnimplementedForecastAPIServer
// for forward compatibility.
type ForecastAPIServer interface {
	Forecast(context.Context, *ForecastRequest) (*ForecastResponse, error)
	StreamForecast(*ForecastStreamRequest, grpc.ServerStreamingServer[ForecastPoint]) error
	AddServerToScheduler(context.Context, *AddServerRequest) (*AddServerResponse, error)
	RemoveServerFromScheduler(context.Context, *RemoveServerRequest) (*RemoveServerResponse, error)
	RemoveModel(context.Context, *RemoveModelRequest) (*RemoveModelResponse, error)
	mustEmbedUnimplementedForecastAPIServer()
}

// UnimplementedForecastAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForecastAPIServer struct{}

func (UnimplementedForecastAPIServer) Forecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forecast not implemented")
}
func (UnimplementedForecastAPIServer) StreamForecast(*ForecastStreamRequest, grpc.ServerStreamingServer[ForecastPoint]) error {
	return status.Errorf(codes.Unimplemented, "method StreamForecast not implemented")
}
func (UnimplementedForecastAPIServer) AddServerToScheduler(context.Context, *AddServerRequest) (*AddServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServerToScheduler not implemented")
}
func (UnimplementedForecastAPIServer) RemoveServerFromScheduler(context.Context, *RemoveServerRequest) (*RemoveServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServerFromScheduler not implemented")
}
func (UnimplementedForecastAPIServer) RemoveModel(context.Context, *RemoveModelRequest) (*RemoveModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveModel not implemented")
}
func (UnimplementedForecastAPIServer) mustEmbedUnimplementedForecastAPIServer() {}
func (UnimplementedForecastAPIServer) testEmbeddedByValue()                     {}

// UnsafeForecastAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForecastAPIServer will
// result in compilation errors.
type UnsafeForecastAPIServer interface {
	mustEmbedUnimplementedForecastAPIServer()
}

func RegisterForecastAPIServer(s grpc.ServiceRegistrar, srv ForecastAPIServer) {
	// If the following call pancis, it indicates UnimplementedForecastAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ForecastAPI_ServiceDesc, srv)
}

func _ForecastAPI_Forecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastAPIServer).Forecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastAPI_Forecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastAPIServer).Forecast(ctx, req.(*ForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastAPI_StreamForecast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ForecastStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForecastAPIServer).StreamForecast(m, &grpc.GenericServerStream[ForecastStreamRequest, ForecastPoint]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ForecastAPI_StreamForecastServer = grpc.ServerStreamingServer[ForecastPoint]

func _ForecastAPI_AddServerToScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastAPIServer).AddServerToScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastAPI_AddServerToScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastAPIServer).AddServerToScheduler(ctx, req.(*AddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastAPI_RemoveServerFromScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastAPIServer).RemoveServerFromScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastAPI_RemoveServerFromScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastAPIServer).RemoveServerFromScheduler(ctx, req.(*RemoveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastAPI_RemoveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastAPIServer).RemoveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastAPI_RemoveModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastAPIServer).RemoveModel(ctx, req.(*RemoveModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForecastAPI_ServiceDesc is the grpc.ServiceDesc for ForecastAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForecastAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forecast_api.ForecastAPI",
	HandlerType: (*ForecastAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Forecast",
			Handler:    _ForecastAPI_Forecast_Handler,
		},
		{
			MethodName: "AddServerToScheduler",
			Handler:    _ForecastAPI_AddServerToScheduler_Handler,
		},
		{
			MethodName: "RemoveServerFromScheduler",
			Handler:    _ForecastAPI_RemoveServerFromScheduler_Handler,
		},
		{
			MethodName: "RemoveModel",
			Handler:    _ForecastAPI_RemoveModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamForecast",
			Handler:       _ForecastAPI_StreamForecast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "forecast-api/forecast-api.proto",
}
