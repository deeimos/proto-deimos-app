// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: public-api/public-forecast.proto

package public_apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublicForecast_GetForecast_FullMethodName           = "/public_api.PublicForecast/GetForecast"
	PublicForecast_StreamForecastUpdates_FullMethodName = "/public_api.PublicForecast/StreamForecastUpdates"
)

// PublicForecastClient is the client API for PublicForecast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicForecastClient interface {
	GetForecast(ctx context.Context, in *PublicForecastRequest, opts ...grpc.CallOption) (*PublicForecastResponse, error)
	StreamForecastUpdates(ctx context.Context, in *PublicForecastStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PublicForecastPoint], error)
}

type publicForecastClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicForecastClient(cc grpc.ClientConnInterface) PublicForecastClient {
	return &publicForecastClient{cc}
}

func (c *publicForecastClient) GetForecast(ctx context.Context, in *PublicForecastRequest, opts ...grpc.CallOption) (*PublicForecastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicForecastResponse)
	err := c.cc.Invoke(ctx, PublicForecast_GetForecast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicForecastClient) StreamForecastUpdates(ctx context.Context, in *PublicForecastStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PublicForecastPoint], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicForecast_ServiceDesc.Streams[0], PublicForecast_StreamForecastUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PublicForecastStreamRequest, PublicForecastPoint]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicForecast_StreamForecastUpdatesClient = grpc.ServerStreamingClient[PublicForecastPoint]

// PublicForecastServer is the server API for PublicForecast service.
// All implementations must embed UnimplementedPublicForecastServer
// for forward compatibility.
type PublicForecastServer interface {
	GetForecast(context.Context, *PublicForecastRequest) (*PublicForecastResponse, error)
	StreamForecastUpdates(*PublicForecastStreamRequest, grpc.ServerStreamingServer[PublicForecastPoint]) error
	mustEmbedUnimplementedPublicForecastServer()
}

// UnimplementedPublicForecastServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicForecastServer struct{}

func (UnimplementedPublicForecastServer) GetForecast(context.Context, *PublicForecastRequest) (*PublicForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecast not implemented")
}
func (UnimplementedPublicForecastServer) StreamForecastUpdates(*PublicForecastStreamRequest, grpc.ServerStreamingServer[PublicForecastPoint]) error {
	return status.Errorf(codes.Unimplemented, "method StreamForecastUpdates not implemented")
}
func (UnimplementedPublicForecastServer) mustEmbedUnimplementedPublicForecastServer() {}
func (UnimplementedPublicForecastServer) testEmbeddedByValue()                        {}

// UnsafePublicForecastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicForecastServer will
// result in compilation errors.
type UnsafePublicForecastServer interface {
	mustEmbedUnimplementedPublicForecastServer()
}

func RegisterPublicForecastServer(s grpc.ServiceRegistrar, srv PublicForecastServer) {
	// If the following call pancis, it indicates UnimplementedPublicForecastServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicForecast_ServiceDesc, srv)
}

func _PublicForecast_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicForecastServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicForecast_GetForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicForecastServer).GetForecast(ctx, req.(*PublicForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicForecast_StreamForecastUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublicForecastStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicForecastServer).StreamForecastUpdates(m, &grpc.GenericServerStream[PublicForecastStreamRequest, PublicForecastPoint]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicForecast_StreamForecastUpdatesServer = grpc.ServerStreamingServer[PublicForecastPoint]

// PublicForecast_ServiceDesc is the grpc.ServiceDesc for PublicForecast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicForecast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public_api.PublicForecast",
	HandlerType: (*PublicForecastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForecast",
			Handler:    _PublicForecast_GetForecast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamForecastUpdates",
			Handler:       _PublicForecast_StreamForecastUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "public-api/public-forecast.proto",
}
