// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/public-api/public-servers.proto (package public_api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message public_api.CreateServerRequest
 */
export class CreateServerRequest extends Message<CreateServerRequest> {
  /**
   * @generated from field: string encrypted_ip = 1;
   */
  encryptedIp = "";

  /**
   * @generated from field: string encrypted_port = 2;
   */
  encryptedPort = "";

  /**
   * @generated from field: string encrypted_display_name = 3;
   */
  encryptedDisplayName = "";

  /**
   * @generated from field: bool is_monitoring_enabled = 5;
   */
  isMonitoringEnabled = false;

  constructor(data?: PartialMessage<CreateServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.CreateServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encrypted_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "encrypted_port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "encrypted_display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_monitoring_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServerRequest {
    return new CreateServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServerRequest {
    return new CreateServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServerRequest {
    return new CreateServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServerRequest | PlainMessage<CreateServerRequest> | undefined, b: CreateServerRequest | PlainMessage<CreateServerRequest> | undefined): boolean {
    return proto3.util.equals(CreateServerRequest, a, b);
  }
}

/**
 * @generated from message public_api.CreateServerResponse
 */
export class CreateServerResponse extends Message<CreateServerResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreateServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.CreateServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServerResponse {
    return new CreateServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServerResponse {
    return new CreateServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServerResponse {
    return new CreateServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServerResponse | PlainMessage<CreateServerResponse> | undefined, b: CreateServerResponse | PlainMessage<CreateServerResponse> | undefined): boolean {
    return proto3.util.equals(CreateServerResponse, a, b);
  }
}

/**
 * @generated from message public_api.UpdateServerRequest
 */
export class UpdateServerRequest extends Message<UpdateServerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string encrypted_ip = 2;
   */
  encryptedIp = "";

  /**
   * @generated from field: string encrypted_port = 3;
   */
  encryptedPort = "";

  /**
   * @generated from field: string encrypted_display_name = 4;
   */
  encryptedDisplayName = "";

  /**
   * @generated from field: bool is_monitoring_enabled = 5;
   */
  isMonitoringEnabled = false;

  constructor(data?: PartialMessage<UpdateServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.UpdateServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "encrypted_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "encrypted_port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "encrypted_display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_monitoring_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServerRequest {
    return new UpdateServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServerRequest {
    return new UpdateServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServerRequest {
    return new UpdateServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServerRequest | PlainMessage<UpdateServerRequest> | undefined, b: UpdateServerRequest | PlainMessage<UpdateServerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateServerRequest, a, b);
  }
}

/**
 * @generated from message public_api.UpdateServerResponse
 */
export class UpdateServerResponse extends Message<UpdateServerResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UpdateServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.UpdateServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServerResponse {
    return new UpdateServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServerResponse {
    return new UpdateServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServerResponse {
    return new UpdateServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServerResponse | PlainMessage<UpdateServerResponse> | undefined, b: UpdateServerResponse | PlainMessage<UpdateServerResponse> | undefined): boolean {
    return proto3.util.equals(UpdateServerResponse, a, b);
  }
}

/**
 * @generated from message public_api.GetServerRequest
 */
export class GetServerRequest extends Message<GetServerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.GetServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServerRequest {
    return new GetServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServerRequest {
    return new GetServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServerRequest {
    return new GetServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServerRequest | PlainMessage<GetServerRequest> | undefined, b: GetServerRequest | PlainMessage<GetServerRequest> | undefined): boolean {
    return proto3.util.equals(GetServerRequest, a, b);
  }
}

/**
 * @generated from message public_api.GetServerResponse
 */
export class GetServerResponse extends Message<GetServerResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string encrypted_ip = 2;
   */
  encryptedIp = "";

  /**
   * @generated from field: string encrypted_port = 3;
   */
  encryptedPort = "";

  /**
   * @generated from field: string encrypted_display_name = 4;
   */
  encryptedDisplayName = "";

  /**
   * @generated from field: bool is_monitoring_enabled = 5;
   */
  isMonitoringEnabled = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<GetServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.GetServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "encrypted_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "encrypted_port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "encrypted_display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_monitoring_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServerResponse {
    return new GetServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServerResponse {
    return new GetServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServerResponse {
    return new GetServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetServerResponse | PlainMessage<GetServerResponse> | undefined, b: GetServerResponse | PlainMessage<GetServerResponse> | undefined): boolean {
    return proto3.util.equals(GetServerResponse, a, b);
  }
}

/**
 * @generated from message public_api.GetServersListRequest
 */
export class GetServersListRequest extends Message<GetServersListRequest> {
  constructor(data?: PartialMessage<GetServersListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.GetServersListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServersListRequest {
    return new GetServersListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServersListRequest {
    return new GetServersListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServersListRequest {
    return new GetServersListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServersListRequest | PlainMessage<GetServersListRequest> | undefined, b: GetServersListRequest | PlainMessage<GetServersListRequest> | undefined): boolean {
    return proto3.util.equals(GetServersListRequest, a, b);
  }
}

/**
 * @generated from message public_api.GetServersListResponse
 */
export class GetServersListResponse extends Message<GetServersListResponse> {
  /**
   * @generated from field: repeated public_api.GetServerResponse servers = 1;
   */
  servers: GetServerResponse[] = [];

  constructor(data?: PartialMessage<GetServersListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.GetServersListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "servers", kind: "message", T: GetServerResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServersListResponse {
    return new GetServersListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServersListResponse {
    return new GetServersListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServersListResponse {
    return new GetServersListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetServersListResponse | PlainMessage<GetServersListResponse> | undefined, b: GetServersListResponse | PlainMessage<GetServersListResponse> | undefined): boolean {
    return proto3.util.equals(GetServersListResponse, a, b);
  }
}

/**
 * @generated from message public_api.DeleteServerRequest
 */
export class DeleteServerRequest extends Message<DeleteServerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.DeleteServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServerRequest {
    return new DeleteServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServerRequest {
    return new DeleteServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServerRequest {
    return new DeleteServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServerRequest | PlainMessage<DeleteServerRequest> | undefined, b: DeleteServerRequest | PlainMessage<DeleteServerRequest> | undefined): boolean {
    return proto3.util.equals(DeleteServerRequest, a, b);
  }
}

/**
 * @generated from message public_api.DeleteServerResponse
 */
export class DeleteServerResponse extends Message<DeleteServerResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.DeleteServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServerResponse {
    return new DeleteServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServerResponse {
    return new DeleteServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServerResponse {
    return new DeleteServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServerResponse | PlainMessage<DeleteServerResponse> | undefined, b: DeleteServerResponse | PlainMessage<DeleteServerResponse> | undefined): boolean {
    return proto3.util.equals(DeleteServerResponse, a, b);
  }
}

