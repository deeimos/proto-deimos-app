// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tg-notify/tg-notify.proto

package tg_notify_apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TgNotifyAPI_IsBinded_FullMethodName       = "/tg_notify_api.TgNotifyAPI/IsBinded"
	TgNotifyAPI_BindUser_FullMethodName       = "/tg_notify_api.TgNotifyAPI/BindUser"
	TgNotifyAPI_UnbindUser_FullMethodName     = "/tg_notify_api.TgNotifyAPI/UnbindUser"
	TgNotifyAPI_NotifyUser_FullMethodName     = "/tg_notify_api.TgNotifyAPI/NotifyUser"
	TgNotifyAPI_NotifyByServer_FullMethodName = "/tg_notify_api.TgNotifyAPI/NotifyByServer"
	TgNotifyAPI_SendInfo_FullMethodName       = "/tg_notify_api.TgNotifyAPI/SendInfo"
)

// TgNotifyAPIClient is the client API for TgNotifyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TgNotifyAPIClient interface {
	IsBinded(ctx context.Context, in *IsBindedRequest, opts ...grpc.CallOption) (*IsBindedResponse, error)
	BindUser(ctx context.Context, in *BindUserRequest, opts ...grpc.CallOption) (*BindUserResponse, error)
	UnbindUser(ctx context.Context, in *UnbindUserRequest, opts ...grpc.CallOption) (*UnbindUserResponse, error)
	NotifyUser(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	NotifyByServer(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	SendInfo(ctx context.Context, in *SendInfoRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type tgNotifyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTgNotifyAPIClient(cc grpc.ClientConnInterface) TgNotifyAPIClient {
	return &tgNotifyAPIClient{cc}
}

func (c *tgNotifyAPIClient) IsBinded(ctx context.Context, in *IsBindedRequest, opts ...grpc.CallOption) (*IsBindedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsBindedResponse)
	err := c.cc.Invoke(ctx, TgNotifyAPI_IsBinded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgNotifyAPIClient) BindUser(ctx context.Context, in *BindUserRequest, opts ...grpc.CallOption) (*BindUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindUserResponse)
	err := c.cc.Invoke(ctx, TgNotifyAPI_BindUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgNotifyAPIClient) UnbindUser(ctx context.Context, in *UnbindUserRequest, opts ...grpc.CallOption) (*UnbindUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindUserResponse)
	err := c.cc.Invoke(ctx, TgNotifyAPI_UnbindUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgNotifyAPIClient) NotifyUser(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, TgNotifyAPI_NotifyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgNotifyAPIClient) NotifyByServer(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, TgNotifyAPI_NotifyByServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgNotifyAPIClient) SendInfo(ctx context.Context, in *SendInfoRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, TgNotifyAPI_SendInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TgNotifyAPIServer is the server API for TgNotifyAPI service.
// All implementations must embed UnimplementedTgNotifyAPIServer
// for forward compatibility.
type TgNotifyAPIServer interface {
	IsBinded(context.Context, *IsBindedRequest) (*IsBindedResponse, error)
	BindUser(context.Context, *BindUserRequest) (*BindUserResponse, error)
	UnbindUser(context.Context, *UnbindUserRequest) (*UnbindUserResponse, error)
	NotifyUser(context.Context, *NotifyRequest) (*ResultResponse, error)
	NotifyByServer(context.Context, *NotifyRequest) (*ResultResponse, error)
	SendInfo(context.Context, *SendInfoRequest) (*ResultResponse, error)
	mustEmbedUnimplementedTgNotifyAPIServer()
}

// UnimplementedTgNotifyAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTgNotifyAPIServer struct{}

func (UnimplementedTgNotifyAPIServer) IsBinded(context.Context, *IsBindedRequest) (*IsBindedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBinded not implemented")
}
func (UnimplementedTgNotifyAPIServer) BindUser(context.Context, *BindUserRequest) (*BindUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUser not implemented")
}
func (UnimplementedTgNotifyAPIServer) UnbindUser(context.Context, *UnbindUserRequest) (*UnbindUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUser not implemented")
}
func (UnimplementedTgNotifyAPIServer) NotifyUser(context.Context, *NotifyRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUser not implemented")
}
func (UnimplementedTgNotifyAPIServer) NotifyByServer(context.Context, *NotifyRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyByServer not implemented")
}
func (UnimplementedTgNotifyAPIServer) SendInfo(context.Context, *SendInfoRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInfo not implemented")
}
func (UnimplementedTgNotifyAPIServer) mustEmbedUnimplementedTgNotifyAPIServer() {}
func (UnimplementedTgNotifyAPIServer) testEmbeddedByValue()                     {}

// UnsafeTgNotifyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TgNotifyAPIServer will
// result in compilation errors.
type UnsafeTgNotifyAPIServer interface {
	mustEmbedUnimplementedTgNotifyAPIServer()
}

func RegisterTgNotifyAPIServer(s grpc.ServiceRegistrar, srv TgNotifyAPIServer) {
	// If the following call pancis, it indicates UnimplementedTgNotifyAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TgNotifyAPI_ServiceDesc, srv)
}

func _TgNotifyAPI_IsBinded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBindedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgNotifyAPIServer).IsBinded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgNotifyAPI_IsBinded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgNotifyAPIServer).IsBinded(ctx, req.(*IsBindedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgNotifyAPI_BindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgNotifyAPIServer).BindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgNotifyAPI_BindUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgNotifyAPIServer).BindUser(ctx, req.(*BindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgNotifyAPI_UnbindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgNotifyAPIServer).UnbindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgNotifyAPI_UnbindUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgNotifyAPIServer).UnbindUser(ctx, req.(*UnbindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgNotifyAPI_NotifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgNotifyAPIServer).NotifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgNotifyAPI_NotifyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgNotifyAPIServer).NotifyUser(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgNotifyAPI_NotifyByServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgNotifyAPIServer).NotifyByServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgNotifyAPI_NotifyByServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgNotifyAPIServer).NotifyByServer(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgNotifyAPI_SendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgNotifyAPIServer).SendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgNotifyAPI_SendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgNotifyAPIServer).SendInfo(ctx, req.(*SendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TgNotifyAPI_ServiceDesc is the grpc.ServiceDesc for TgNotifyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TgNotifyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tg_notify_api.TgNotifyAPI",
	HandlerType: (*TgNotifyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsBinded",
			Handler:    _TgNotifyAPI_IsBinded_Handler,
		},
		{
			MethodName: "BindUser",
			Handler:    _TgNotifyAPI_BindUser_Handler,
		},
		{
			MethodName: "UnbindUser",
			Handler:    _TgNotifyAPI_UnbindUser_Handler,
		},
		{
			MethodName: "NotifyUser",
			Handler:    _TgNotifyAPI_NotifyUser_Handler,
		},
		{
			MethodName: "NotifyByServer",
			Handler:    _TgNotifyAPI_NotifyByServer_Handler,
		},
		{
			MethodName: "SendInfo",
			Handler:    _TgNotifyAPI_SendInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tg-notify/tg-notify.proto",
}
