/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: public-api/public-servers.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace public_api {
    export class CreateServerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            encrypted_ip?: string;
            encrypted_port?: string;
            encrypted_display_name?: string;
            is_monitoring_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("encrypted_ip" in data && data.encrypted_ip != undefined) {
                    this.encrypted_ip = data.encrypted_ip;
                }
                if ("encrypted_port" in data && data.encrypted_port != undefined) {
                    this.encrypted_port = data.encrypted_port;
                }
                if ("encrypted_display_name" in data && data.encrypted_display_name != undefined) {
                    this.encrypted_display_name = data.encrypted_display_name;
                }
                if ("is_monitoring_enabled" in data && data.is_monitoring_enabled != undefined) {
                    this.is_monitoring_enabled = data.is_monitoring_enabled;
                }
            }
        }
        get encrypted_ip() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set encrypted_ip(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get encrypted_port() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set encrypted_port(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get encrypted_display_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set encrypted_display_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_monitoring_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_monitoring_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            encrypted_ip?: string;
            encrypted_port?: string;
            encrypted_display_name?: string;
            is_monitoring_enabled?: boolean;
        }): CreateServerRequest {
            const message = new CreateServerRequest({});
            if (data.encrypted_ip != null) {
                message.encrypted_ip = data.encrypted_ip;
            }
            if (data.encrypted_port != null) {
                message.encrypted_port = data.encrypted_port;
            }
            if (data.encrypted_display_name != null) {
                message.encrypted_display_name = data.encrypted_display_name;
            }
            if (data.is_monitoring_enabled != null) {
                message.is_monitoring_enabled = data.is_monitoring_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                encrypted_ip?: string;
                encrypted_port?: string;
                encrypted_display_name?: string;
                is_monitoring_enabled?: boolean;
            } = {};
            if (this.encrypted_ip != null) {
                data.encrypted_ip = this.encrypted_ip;
            }
            if (this.encrypted_port != null) {
                data.encrypted_port = this.encrypted_port;
            }
            if (this.encrypted_display_name != null) {
                data.encrypted_display_name = this.encrypted_display_name;
            }
            if (this.is_monitoring_enabled != null) {
                data.is_monitoring_enabled = this.is_monitoring_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.encrypted_ip.length)
                writer.writeString(1, this.encrypted_ip);
            if (this.encrypted_port.length)
                writer.writeString(2, this.encrypted_port);
            if (this.encrypted_display_name.length)
                writer.writeString(3, this.encrypted_display_name);
            if (this.is_monitoring_enabled != false)
                writer.writeBool(5, this.is_monitoring_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateServerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateServerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.encrypted_ip = reader.readString();
                        break;
                    case 2:
                        message.encrypted_port = reader.readString();
                        break;
                    case 3:
                        message.encrypted_display_name = reader.readString();
                        break;
                    case 5:
                        message.is_monitoring_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateServerRequest {
            return CreateServerRequest.deserialize(bytes);
        }
    }
    export class CreateServerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): CreateServerResponse {
            const message = new CreateServerResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateServerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateServerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateServerResponse {
            return CreateServerResponse.deserialize(bytes);
        }
    }
    export class UpdateServerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            encrypted_ip?: string;
            encrypted_port?: string;
            encrypted_display_name?: string;
            is_monitoring_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("encrypted_ip" in data && data.encrypted_ip != undefined) {
                    this.encrypted_ip = data.encrypted_ip;
                }
                if ("encrypted_port" in data && data.encrypted_port != undefined) {
                    this.encrypted_port = data.encrypted_port;
                }
                if ("encrypted_display_name" in data && data.encrypted_display_name != undefined) {
                    this.encrypted_display_name = data.encrypted_display_name;
                }
                if ("is_monitoring_enabled" in data && data.is_monitoring_enabled != undefined) {
                    this.is_monitoring_enabled = data.is_monitoring_enabled;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get encrypted_ip() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set encrypted_ip(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get encrypted_port() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set encrypted_port(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get encrypted_display_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set encrypted_display_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_monitoring_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_monitoring_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            encrypted_ip?: string;
            encrypted_port?: string;
            encrypted_display_name?: string;
            is_monitoring_enabled?: boolean;
        }): UpdateServerRequest {
            const message = new UpdateServerRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.encrypted_ip != null) {
                message.encrypted_ip = data.encrypted_ip;
            }
            if (data.encrypted_port != null) {
                message.encrypted_port = data.encrypted_port;
            }
            if (data.encrypted_display_name != null) {
                message.encrypted_display_name = data.encrypted_display_name;
            }
            if (data.is_monitoring_enabled != null) {
                message.is_monitoring_enabled = data.is_monitoring_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                encrypted_ip?: string;
                encrypted_port?: string;
                encrypted_display_name?: string;
                is_monitoring_enabled?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.encrypted_ip != null) {
                data.encrypted_ip = this.encrypted_ip;
            }
            if (this.encrypted_port != null) {
                data.encrypted_port = this.encrypted_port;
            }
            if (this.encrypted_display_name != null) {
                data.encrypted_display_name = this.encrypted_display_name;
            }
            if (this.is_monitoring_enabled != null) {
                data.is_monitoring_enabled = this.is_monitoring_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.encrypted_ip.length)
                writer.writeString(2, this.encrypted_ip);
            if (this.encrypted_port.length)
                writer.writeString(3, this.encrypted_port);
            if (this.encrypted_display_name.length)
                writer.writeString(4, this.encrypted_display_name);
            if (this.is_monitoring_enabled != false)
                writer.writeBool(5, this.is_monitoring_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateServerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateServerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.encrypted_ip = reader.readString();
                        break;
                    case 3:
                        message.encrypted_port = reader.readString();
                        break;
                    case 4:
                        message.encrypted_display_name = reader.readString();
                        break;
                    case 5:
                        message.is_monitoring_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateServerRequest {
            return UpdateServerRequest.deserialize(bytes);
        }
    }
    export class UpdateServerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): UpdateServerResponse {
            const message = new UpdateServerResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateServerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateServerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateServerResponse {
            return UpdateServerResponse.deserialize(bytes);
        }
    }
    export class GetServerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetServerRequest {
            const message = new GetServerRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServerRequest {
            return GetServerRequest.deserialize(bytes);
        }
    }
    export class GetServerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            encrypted_ip?: string;
            encrypted_port?: string;
            encrypted_display_name?: string;
            is_monitoring_enabled?: boolean;
            created_at?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("encrypted_ip" in data && data.encrypted_ip != undefined) {
                    this.encrypted_ip = data.encrypted_ip;
                }
                if ("encrypted_port" in data && data.encrypted_port != undefined) {
                    this.encrypted_port = data.encrypted_port;
                }
                if ("encrypted_display_name" in data && data.encrypted_display_name != undefined) {
                    this.encrypted_display_name = data.encrypted_display_name;
                }
                if ("is_monitoring_enabled" in data && data.is_monitoring_enabled != undefined) {
                    this.is_monitoring_enabled = data.is_monitoring_enabled;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get encrypted_ip() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set encrypted_ip(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get encrypted_port() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set encrypted_port(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get encrypted_display_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set encrypted_display_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_monitoring_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_monitoring_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            id?: string;
            encrypted_ip?: string;
            encrypted_port?: string;
            encrypted_display_name?: string;
            is_monitoring_enabled?: boolean;
            created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): GetServerResponse {
            const message = new GetServerResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.encrypted_ip != null) {
                message.encrypted_ip = data.encrypted_ip;
            }
            if (data.encrypted_port != null) {
                message.encrypted_port = data.encrypted_port;
            }
            if (data.encrypted_display_name != null) {
                message.encrypted_display_name = data.encrypted_display_name;
            }
            if (data.is_monitoring_enabled != null) {
                message.is_monitoring_enabled = data.is_monitoring_enabled;
            }
            if (data.created_at != null) {
                message.created_at = dependency_1.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                encrypted_ip?: string;
                encrypted_port?: string;
                encrypted_display_name?: string;
                is_monitoring_enabled?: boolean;
                created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.encrypted_ip != null) {
                data.encrypted_ip = this.encrypted_ip;
            }
            if (this.encrypted_port != null) {
                data.encrypted_port = this.encrypted_port;
            }
            if (this.encrypted_display_name != null) {
                data.encrypted_display_name = this.encrypted_display_name;
            }
            if (this.is_monitoring_enabled != null) {
                data.is_monitoring_enabled = this.is_monitoring_enabled;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.encrypted_ip.length)
                writer.writeString(2, this.encrypted_ip);
            if (this.encrypted_port.length)
                writer.writeString(3, this.encrypted_port);
            if (this.encrypted_display_name.length)
                writer.writeString(4, this.encrypted_display_name);
            if (this.is_monitoring_enabled != false)
                writer.writeBool(5, this.is_monitoring_enabled);
            if (this.has_created_at)
                writer.writeMessage(6, this.created_at, () => this.created_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.encrypted_ip = reader.readString();
                        break;
                    case 3:
                        message.encrypted_port = reader.readString();
                        break;
                    case 4:
                        message.encrypted_display_name = reader.readString();
                        break;
                    case 5:
                        message.is_monitoring_enabled = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServerResponse {
            return GetServerResponse.deserialize(bytes);
        }
    }
    export class GetServersListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetServersListRequest {
            const message = new GetServersListRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServersListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServersListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServersListRequest {
            return GetServersListRequest.deserialize(bytes);
        }
    }
    export class GetServersListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            servers?: GetServerResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("servers" in data && data.servers != undefined) {
                    this.servers = data.servers;
                }
            }
        }
        get servers() {
            return pb_1.Message.getRepeatedWrapperField(this, GetServerResponse, 1) as GetServerResponse[];
        }
        set servers(value: GetServerResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            servers?: ReturnType<typeof GetServerResponse.prototype.toObject>[];
        }): GetServersListResponse {
            const message = new GetServersListResponse({});
            if (data.servers != null) {
                message.servers = data.servers.map(item => GetServerResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                servers?: ReturnType<typeof GetServerResponse.prototype.toObject>[];
            } = {};
            if (this.servers != null) {
                data.servers = this.servers.map((item: GetServerResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.servers.length)
                writer.writeRepeatedMessage(1, this.servers, (item: GetServerResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServersListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServersListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.servers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetServerResponse.deserialize(reader), GetServerResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServersListResponse {
            return GetServersListResponse.deserialize(bytes);
        }
    }
    export class DeleteServerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeleteServerRequest {
            const message = new DeleteServerRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteServerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteServerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteServerRequest {
            return DeleteServerRequest.deserialize(bytes);
        }
    }
    export class DeleteServerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeleteServerResponse {
            const message = new DeleteServerResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteServerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteServerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteServerResponse {
            return DeleteServerResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPublicServersService {
        static definition = {
            CreateServer: {
                path: "/public_api.PublicServers/CreateServer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateServerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateServerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateServerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateServerResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateServer: {
                path: "/public_api.PublicServers/UpdateServer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateServerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateServerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateServerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateServerResponse.deserialize(new Uint8Array(bytes))
            },
            GetServer: {
                path: "/public_api.PublicServers/GetServer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetServerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetServerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetServerResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteServer: {
                path: "/public_api.PublicServers/DeleteServer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteServerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteServerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteServerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteServerResponse.deserialize(new Uint8Array(bytes))
            },
            GetServersList: {
                path: "/public_api.PublicServers/GetServersList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetServersListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServersListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetServersListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetServersListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateServer(call: grpc_1.ServerUnaryCall<CreateServerRequest, CreateServerResponse>, callback: grpc_1.sendUnaryData<CreateServerResponse>): void;
        abstract UpdateServer(call: grpc_1.ServerUnaryCall<UpdateServerRequest, UpdateServerResponse>, callback: grpc_1.sendUnaryData<UpdateServerResponse>): void;
        abstract GetServer(call: grpc_1.ServerUnaryCall<GetServerRequest, GetServerResponse>, callback: grpc_1.sendUnaryData<GetServerResponse>): void;
        abstract DeleteServer(call: grpc_1.ServerUnaryCall<DeleteServerRequest, DeleteServerResponse>, callback: grpc_1.sendUnaryData<DeleteServerResponse>): void;
        abstract GetServersList(call: grpc_1.ServerUnaryCall<GetServersListRequest, GetServersListResponse>, callback: grpc_1.sendUnaryData<GetServersListResponse>): void;
    }
    export class PublicServersClient extends grpc_1.makeGenericClientConstructor(UnimplementedPublicServersService.definition, "PublicServers", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateServer: GrpcUnaryServiceInterface<CreateServerRequest, CreateServerResponse> = (message: CreateServerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateServerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateServerResponse>, callback?: grpc_1.requestCallback<CreateServerResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateServer(message, metadata, options, callback);
        };
        UpdateServer: GrpcUnaryServiceInterface<UpdateServerRequest, UpdateServerResponse> = (message: UpdateServerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateServerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateServerResponse>, callback?: grpc_1.requestCallback<UpdateServerResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateServer(message, metadata, options, callback);
        };
        GetServer: GrpcUnaryServiceInterface<GetServerRequest, GetServerResponse> = (message: GetServerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetServerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetServerResponse>, callback?: grpc_1.requestCallback<GetServerResponse>): grpc_1.ClientUnaryCall => {
            return super.GetServer(message, metadata, options, callback);
        };
        DeleteServer: GrpcUnaryServiceInterface<DeleteServerRequest, DeleteServerResponse> = (message: DeleteServerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteServerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteServerResponse>, callback?: grpc_1.requestCallback<DeleteServerResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteServer(message, metadata, options, callback);
        };
        GetServersList: GrpcUnaryServiceInterface<GetServersListRequest, GetServersListResponse> = (message: GetServersListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetServersListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetServersListResponse>, callback?: grpc_1.requestCallback<GetServersListResponse>): grpc_1.ClientUnaryCall => {
            return super.GetServersList(message, metadata, options, callback);
        };
    }
}
