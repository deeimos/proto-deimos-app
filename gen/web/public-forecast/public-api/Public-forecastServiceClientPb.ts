/**
 * @fileoverview gRPC-Web generated client stub for public_api
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: public-api/public-forecast.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as public$api_public$forecast_pb from '../public-api/public-forecast_pb'; // proto import: "public-api/public-forecast.proto"


export class PublicForecastClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorServerForecast = new grpcWeb.MethodDescriptor(
    '/public_api.PublicForecast/ServerForecast',
    grpcWeb.MethodType.UNARY,
    public$api_public$forecast_pb.PublicForecastRequest,
    public$api_public$forecast_pb.PublicForecastResponse,
    (request: public$api_public$forecast_pb.PublicForecastRequest) => {
      return request.serializeBinary();
    },
    public$api_public$forecast_pb.PublicForecastResponse.deserializeBinary
  );

  serverForecast(
    request: public$api_public$forecast_pb.PublicForecastRequest,
    metadata?: grpcWeb.Metadata | null): Promise<public$api_public$forecast_pb.PublicForecastResponse>;

  serverForecast(
    request: public$api_public$forecast_pb.PublicForecastRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: public$api_public$forecast_pb.PublicForecastResponse) => void): grpcWeb.ClientReadableStream<public$api_public$forecast_pb.PublicForecastResponse>;

  serverForecast(
    request: public$api_public$forecast_pb.PublicForecastRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: public$api_public$forecast_pb.PublicForecastResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/public_api.PublicForecast/ServerForecast',
        request,
        metadata || {},
        this.methodDescriptorServerForecast,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/public_api.PublicForecast/ServerForecast',
    request,
    metadata || {},
    this.methodDescriptorServerForecast);
  }

  methodDescriptorStreamServerForecast = new grpcWeb.MethodDescriptor(
    '/public_api.PublicForecast/StreamServerForecast',
    grpcWeb.MethodType.SERVER_STREAMING,
    public$api_public$forecast_pb.PublicForecastStreamRequest,
    public$api_public$forecast_pb.PublicForecastPoint,
    (request: public$api_public$forecast_pb.PublicForecastStreamRequest) => {
      return request.serializeBinary();
    },
    public$api_public$forecast_pb.PublicForecastPoint.deserializeBinary
  );

  streamServerForecast(
    request: public$api_public$forecast_pb.PublicForecastStreamRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<public$api_public$forecast_pb.PublicForecastPoint> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/public_api.PublicForecast/StreamServerForecast',
      request,
      metadata || {},
      this.methodDescriptorStreamServerForecast);
  }

}

