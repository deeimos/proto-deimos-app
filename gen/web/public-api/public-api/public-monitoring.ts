/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: public-api/public-monitoring.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace public_api {
    export class PublicServerMetricsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server_id" in data && data.server_id != undefined) {
                    this.server_id = data.server_id;
                }
            }
        }
        get server_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set server_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            server_id?: string;
        }): PublicServerMetricsRequest {
            const message = new PublicServerMetricsRequest({});
            if (data.server_id != null) {
                message.server_id = data.server_id;
            }
            return message;
        }
        toObject() {
            const data: {
                server_id?: string;
            } = {};
            if (this.server_id != null) {
                data.server_id = this.server_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.server_id.length)
                writer.writeString(1, this.server_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicServerMetricsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicServerMetricsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.server_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicServerMetricsRequest {
            return PublicServerMetricsRequest.deserialize(bytes);
        }
    }
    export class PublicServerMetric extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cpu_usage?: number;
            memory_usage?: number;
            disk_usage?: number;
            load_avg_1?: number;
            load_avg_5?: number;
            load_avg_15?: number;
            network_rx?: number;
            network_tx?: number;
            disk_read?: number;
            disk_write?: number;
            process_count?: number;
            io_wait?: number;
            uptime_seconds?: number;
            temperature?: number;
            status?: string;
            timestamp?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cpu_usage" in data && data.cpu_usage != undefined) {
                    this.cpu_usage = data.cpu_usage;
                }
                if ("memory_usage" in data && data.memory_usage != undefined) {
                    this.memory_usage = data.memory_usage;
                }
                if ("disk_usage" in data && data.disk_usage != undefined) {
                    this.disk_usage = data.disk_usage;
                }
                if ("load_avg_1" in data && data.load_avg_1 != undefined) {
                    this.load_avg_1 = data.load_avg_1;
                }
                if ("load_avg_5" in data && data.load_avg_5 != undefined) {
                    this.load_avg_5 = data.load_avg_5;
                }
                if ("load_avg_15" in data && data.load_avg_15 != undefined) {
                    this.load_avg_15 = data.load_avg_15;
                }
                if ("network_rx" in data && data.network_rx != undefined) {
                    this.network_rx = data.network_rx;
                }
                if ("network_tx" in data && data.network_tx != undefined) {
                    this.network_tx = data.network_tx;
                }
                if ("disk_read" in data && data.disk_read != undefined) {
                    this.disk_read = data.disk_read;
                }
                if ("disk_write" in data && data.disk_write != undefined) {
                    this.disk_write = data.disk_write;
                }
                if ("process_count" in data && data.process_count != undefined) {
                    this.process_count = data.process_count;
                }
                if ("io_wait" in data && data.io_wait != undefined) {
                    this.io_wait = data.io_wait;
                }
                if ("uptime_seconds" in data && data.uptime_seconds != undefined) {
                    this.uptime_seconds = data.uptime_seconds;
                }
                if ("temperature" in data && data.temperature != undefined) {
                    this.temperature = data.temperature;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get cpu_usage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set cpu_usage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get memory_usage() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set memory_usage(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get disk_usage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set disk_usage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get load_avg_1() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set load_avg_1(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get load_avg_5() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set load_avg_5(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get load_avg_15() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set load_avg_15(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get network_rx() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set network_rx(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get network_tx() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set network_tx(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get disk_read() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set disk_read(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get disk_write() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set disk_write(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get process_count() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set process_count(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get io_wait() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set io_wait(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get uptime_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set uptime_seconds(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get temperature() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set temperature(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 16) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 16) != null;
        }
        static fromObject(data: {
            cpu_usage?: number;
            memory_usage?: number;
            disk_usage?: number;
            load_avg_1?: number;
            load_avg_5?: number;
            load_avg_15?: number;
            network_rx?: number;
            network_tx?: number;
            disk_read?: number;
            disk_write?: number;
            process_count?: number;
            io_wait?: number;
            uptime_seconds?: number;
            temperature?: number;
            status?: string;
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): PublicServerMetric {
            const message = new PublicServerMetric({});
            if (data.cpu_usage != null) {
                message.cpu_usage = data.cpu_usage;
            }
            if (data.memory_usage != null) {
                message.memory_usage = data.memory_usage;
            }
            if (data.disk_usage != null) {
                message.disk_usage = data.disk_usage;
            }
            if (data.load_avg_1 != null) {
                message.load_avg_1 = data.load_avg_1;
            }
            if (data.load_avg_5 != null) {
                message.load_avg_5 = data.load_avg_5;
            }
            if (data.load_avg_15 != null) {
                message.load_avg_15 = data.load_avg_15;
            }
            if (data.network_rx != null) {
                message.network_rx = data.network_rx;
            }
            if (data.network_tx != null) {
                message.network_tx = data.network_tx;
            }
            if (data.disk_read != null) {
                message.disk_read = data.disk_read;
            }
            if (data.disk_write != null) {
                message.disk_write = data.disk_write;
            }
            if (data.process_count != null) {
                message.process_count = data.process_count;
            }
            if (data.io_wait != null) {
                message.io_wait = data.io_wait;
            }
            if (data.uptime_seconds != null) {
                message.uptime_seconds = data.uptime_seconds;
            }
            if (data.temperature != null) {
                message.temperature = data.temperature;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                cpu_usage?: number;
                memory_usage?: number;
                disk_usage?: number;
                load_avg_1?: number;
                load_avg_5?: number;
                load_avg_15?: number;
                network_rx?: number;
                network_tx?: number;
                disk_read?: number;
                disk_write?: number;
                process_count?: number;
                io_wait?: number;
                uptime_seconds?: number;
                temperature?: number;
                status?: string;
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.cpu_usage != null) {
                data.cpu_usage = this.cpu_usage;
            }
            if (this.memory_usage != null) {
                data.memory_usage = this.memory_usage;
            }
            if (this.disk_usage != null) {
                data.disk_usage = this.disk_usage;
            }
            if (this.load_avg_1 != null) {
                data.load_avg_1 = this.load_avg_1;
            }
            if (this.load_avg_5 != null) {
                data.load_avg_5 = this.load_avg_5;
            }
            if (this.load_avg_15 != null) {
                data.load_avg_15 = this.load_avg_15;
            }
            if (this.network_rx != null) {
                data.network_rx = this.network_rx;
            }
            if (this.network_tx != null) {
                data.network_tx = this.network_tx;
            }
            if (this.disk_read != null) {
                data.disk_read = this.disk_read;
            }
            if (this.disk_write != null) {
                data.disk_write = this.disk_write;
            }
            if (this.process_count != null) {
                data.process_count = this.process_count;
            }
            if (this.io_wait != null) {
                data.io_wait = this.io_wait;
            }
            if (this.uptime_seconds != null) {
                data.uptime_seconds = this.uptime_seconds;
            }
            if (this.temperature != null) {
                data.temperature = this.temperature;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cpu_usage != 0)
                writer.writeDouble(1, this.cpu_usage);
            if (this.memory_usage != 0)
                writer.writeDouble(2, this.memory_usage);
            if (this.disk_usage != 0)
                writer.writeDouble(3, this.disk_usage);
            if (this.load_avg_1 != 0)
                writer.writeDouble(4, this.load_avg_1);
            if (this.load_avg_5 != 0)
                writer.writeDouble(5, this.load_avg_5);
            if (this.load_avg_15 != 0)
                writer.writeDouble(6, this.load_avg_15);
            if (this.network_rx != 0)
                writer.writeDouble(7, this.network_rx);
            if (this.network_tx != 0)
                writer.writeDouble(8, this.network_tx);
            if (this.disk_read != 0)
                writer.writeDouble(9, this.disk_read);
            if (this.disk_write != 0)
                writer.writeDouble(10, this.disk_write);
            if (this.process_count != 0)
                writer.writeInt32(11, this.process_count);
            if (this.io_wait != 0)
                writer.writeDouble(12, this.io_wait);
            if (this.uptime_seconds != 0)
                writer.writeInt64(13, this.uptime_seconds);
            if (this.temperature != 0)
                writer.writeDouble(14, this.temperature);
            if (this.status.length)
                writer.writeString(15, this.status);
            if (this.has_timestamp)
                writer.writeMessage(16, this.timestamp, () => this.timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicServerMetric {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicServerMetric();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cpu_usage = reader.readDouble();
                        break;
                    case 2:
                        message.memory_usage = reader.readDouble();
                        break;
                    case 3:
                        message.disk_usage = reader.readDouble();
                        break;
                    case 4:
                        message.load_avg_1 = reader.readDouble();
                        break;
                    case 5:
                        message.load_avg_5 = reader.readDouble();
                        break;
                    case 6:
                        message.load_avg_15 = reader.readDouble();
                        break;
                    case 7:
                        message.network_rx = reader.readDouble();
                        break;
                    case 8:
                        message.network_tx = reader.readDouble();
                        break;
                    case 9:
                        message.disk_read = reader.readDouble();
                        break;
                    case 10:
                        message.disk_write = reader.readDouble();
                        break;
                    case 11:
                        message.process_count = reader.readInt32();
                        break;
                    case 12:
                        message.io_wait = reader.readDouble();
                        break;
                    case 13:
                        message.uptime_seconds = reader.readInt64();
                        break;
                    case 14:
                        message.temperature = reader.readDouble();
                        break;
                    case 15:
                        message.status = reader.readString();
                        break;
                    case 16:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicServerMetric {
            return PublicServerMetric.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPublicMonitoringService {
        static definition = {
            StreamServerMetrics: {
                path: "/public_api.PublicMonitoring/StreamServerMetrics",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: PublicServerMetricsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PublicServerMetricsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PublicServerMetric) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PublicServerMetric.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract StreamServerMetrics(call: grpc_1.ServerWritableStream<PublicServerMetricsRequest, PublicServerMetric>): void;
    }
    export class PublicMonitoringClient extends grpc_1.makeGenericClientConstructor(UnimplementedPublicMonitoringService.definition, "PublicMonitoring", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        StreamServerMetrics: GrpcStreamServiceInterface<PublicServerMetricsRequest, PublicServerMetric> = (message: PublicServerMetricsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<PublicServerMetric> => {
            return super.StreamServerMetrics(message, metadata, options);
        };
    }
}
