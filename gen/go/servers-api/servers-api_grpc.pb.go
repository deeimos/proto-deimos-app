// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: servers-api/servers-api.proto

package servers_apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServersService_SaveServer_FullMethodName     = "/servers_api.ServersService/SaveServer"
	ServersService_GetServer_FullMethodName      = "/servers_api.ServersService/GetServer"
	ServersService_GetServersList_FullMethodName = "/servers_api.ServersService/GetServersList"
)

// ServersServiceClient is the client API for ServersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServersServiceClient interface {
	SaveServer(ctx context.Context, in *SaveServerRequest, opts ...grpc.CallOption) (*SaveServerResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error)
	GetServersList(ctx context.Context, in *GetServersListRequest, opts ...grpc.CallOption) (*GetServersListResponse, error)
}

type serversServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServersServiceClient(cc grpc.ClientConnInterface) ServersServiceClient {
	return &serversServiceClient{cc}
}

func (c *serversServiceClient) SaveServer(ctx context.Context, in *SaveServerRequest, opts ...grpc.CallOption) (*SaveServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveServerResponse)
	err := c.cc.Invoke(ctx, ServersService_SaveServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversServiceClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerResponse)
	err := c.cc.Invoke(ctx, ServersService_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversServiceClient) GetServersList(ctx context.Context, in *GetServersListRequest, opts ...grpc.CallOption) (*GetServersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServersListResponse)
	err := c.cc.Invoke(ctx, ServersService_GetServersList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServersServiceServer is the server API for ServersService service.
// All implementations must embed UnimplementedServersServiceServer
// for forward compatibility.
type ServersServiceServer interface {
	SaveServer(context.Context, *SaveServerRequest) (*SaveServerResponse, error)
	GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error)
	GetServersList(context.Context, *GetServersListRequest) (*GetServersListResponse, error)
	mustEmbedUnimplementedServersServiceServer()
}

// UnimplementedServersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServersServiceServer struct{}

func (UnimplementedServersServiceServer) SaveServer(context.Context, *SaveServerRequest) (*SaveServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveServer not implemented")
}
func (UnimplementedServersServiceServer) GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedServersServiceServer) GetServersList(context.Context, *GetServersListRequest) (*GetServersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersList not implemented")
}
func (UnimplementedServersServiceServer) mustEmbedUnimplementedServersServiceServer() {}
func (UnimplementedServersServiceServer) testEmbeddedByValue()                        {}

// UnsafeServersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServersServiceServer will
// result in compilation errors.
type UnsafeServersServiceServer interface {
	mustEmbedUnimplementedServersServiceServer()
}

func RegisterServersServiceServer(s grpc.ServiceRegistrar, srv ServersServiceServer) {
	// If the following call pancis, it indicates UnimplementedServersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServersService_ServiceDesc, srv)
}

func _ServersService_SaveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServiceServer).SaveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServersService_SaveServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServiceServer).SaveServer(ctx, req.(*SaveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServersService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServersService_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServiceServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServersService_GetServersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServiceServer).GetServersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServersService_GetServersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServiceServer).GetServersList(ctx, req.(*GetServersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServersService_ServiceDesc is the grpc.ServiceDesc for ServersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servers_api.ServersService",
	HandlerType: (*ServersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveServer",
			Handler:    _ServersService_SaveServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _ServersService_GetServer_Handler,
		},
		{
			MethodName: "GetServersList",
			Handler:    _ServersService_GetServersList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servers-api/servers-api.proto",
}
