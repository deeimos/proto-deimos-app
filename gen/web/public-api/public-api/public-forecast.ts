/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: public-api/public-forecast.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace public_api {
    export class PublicForecastRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server_id" in data && data.server_id != undefined) {
                    this.server_id = data.server_id;
                }
            }
        }
        get server_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set server_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            server_id?: string;
        }): PublicForecastRequest {
            const message = new PublicForecastRequest({});
            if (data.server_id != null) {
                message.server_id = data.server_id;
            }
            return message;
        }
        toObject() {
            const data: {
                server_id?: string;
            } = {};
            if (this.server_id != null) {
                data.server_id = this.server_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.server_id.length)
                writer.writeString(1, this.server_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicForecastRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicForecastRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.server_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicForecastRequest {
            return PublicForecastRequest.deserialize(bytes);
        }
    }
    export class PublicForecastResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server_id?: string;
            forecasts?: PublicForecastPoint[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server_id" in data && data.server_id != undefined) {
                    this.server_id = data.server_id;
                }
                if ("forecasts" in data && data.forecasts != undefined) {
                    this.forecasts = data.forecasts;
                }
            }
        }
        get server_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set server_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get forecasts() {
            return pb_1.Message.getRepeatedWrapperField(this, PublicForecastPoint, 2) as PublicForecastPoint[];
        }
        set forecasts(value: PublicForecastPoint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            server_id?: string;
            forecasts?: ReturnType<typeof PublicForecastPoint.prototype.toObject>[];
        }): PublicForecastResponse {
            const message = new PublicForecastResponse({});
            if (data.server_id != null) {
                message.server_id = data.server_id;
            }
            if (data.forecasts != null) {
                message.forecasts = data.forecasts.map(item => PublicForecastPoint.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                server_id?: string;
                forecasts?: ReturnType<typeof PublicForecastPoint.prototype.toObject>[];
            } = {};
            if (this.server_id != null) {
                data.server_id = this.server_id;
            }
            if (this.forecasts != null) {
                data.forecasts = this.forecasts.map((item: PublicForecastPoint) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.server_id.length)
                writer.writeString(1, this.server_id);
            if (this.forecasts.length)
                writer.writeRepeatedMessage(2, this.forecasts, (item: PublicForecastPoint) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicForecastResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicForecastResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.server_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.forecasts, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PublicForecastPoint.deserialize(reader), PublicForecastPoint));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicForecastResponse {
            return PublicForecastResponse.deserialize(bytes);
        }
    }
    export class PublicForecastStreamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server_id" in data && data.server_id != undefined) {
                    this.server_id = data.server_id;
                }
            }
        }
        get server_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set server_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            server_id?: string;
        }): PublicForecastStreamRequest {
            const message = new PublicForecastStreamRequest({});
            if (data.server_id != null) {
                message.server_id = data.server_id;
            }
            return message;
        }
        toObject() {
            const data: {
                server_id?: string;
            } = {};
            if (this.server_id != null) {
                data.server_id = this.server_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.server_id.length)
                writer.writeString(1, this.server_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicForecastStreamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicForecastStreamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.server_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicForecastStreamRequest {
            return PublicForecastStreamRequest.deserialize(bytes);
        }
    }
    export class PublicForecastPoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: dependency_1.google.protobuf.Timestamp;
            cpu_load?: number;
            memory_load?: number;
            disk_usage?: number;
            load_avg_1?: number;
            load_avg_5?: number;
            network_rx?: number;
            network_tx?: number;
            availability_probability?: number;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("cpu_load" in data && data.cpu_load != undefined) {
                    this.cpu_load = data.cpu_load;
                }
                if ("memory_load" in data && data.memory_load != undefined) {
                    this.memory_load = data.memory_load;
                }
                if ("disk_usage" in data && data.disk_usage != undefined) {
                    this.disk_usage = data.disk_usage;
                }
                if ("load_avg_1" in data && data.load_avg_1 != undefined) {
                    this.load_avg_1 = data.load_avg_1;
                }
                if ("load_avg_5" in data && data.load_avg_5 != undefined) {
                    this.load_avg_5 = data.load_avg_5;
                }
                if ("network_rx" in data && data.network_rx != undefined) {
                    this.network_rx = data.network_rx;
                }
                if ("network_tx" in data && data.network_tx != undefined) {
                    this.network_tx = data.network_tx;
                }
                if ("availability_probability" in data && data.availability_probability != undefined) {
                    this.availability_probability = data.availability_probability;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get cpu_load() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cpu_load(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get memory_load() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set memory_load(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get disk_usage() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set disk_usage(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get load_avg_1() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set load_avg_1(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get load_avg_5() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set load_avg_5(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get network_rx() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set network_rx(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get network_tx() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set network_tx(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get availability_probability() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set availability_probability(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            cpu_load?: number;
            memory_load?: number;
            disk_usage?: number;
            load_avg_1?: number;
            load_avg_5?: number;
            network_rx?: number;
            network_tx?: number;
            availability_probability?: number;
            status?: string;
        }): PublicForecastPoint {
            const message = new PublicForecastPoint({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.cpu_load != null) {
                message.cpu_load = data.cpu_load;
            }
            if (data.memory_load != null) {
                message.memory_load = data.memory_load;
            }
            if (data.disk_usage != null) {
                message.disk_usage = data.disk_usage;
            }
            if (data.load_avg_1 != null) {
                message.load_avg_1 = data.load_avg_1;
            }
            if (data.load_avg_5 != null) {
                message.load_avg_5 = data.load_avg_5;
            }
            if (data.network_rx != null) {
                message.network_rx = data.network_rx;
            }
            if (data.network_tx != null) {
                message.network_tx = data.network_tx;
            }
            if (data.availability_probability != null) {
                message.availability_probability = data.availability_probability;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                cpu_load?: number;
                memory_load?: number;
                disk_usage?: number;
                load_avg_1?: number;
                load_avg_5?: number;
                network_rx?: number;
                network_tx?: number;
                availability_probability?: number;
                status?: string;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.cpu_load != null) {
                data.cpu_load = this.cpu_load;
            }
            if (this.memory_load != null) {
                data.memory_load = this.memory_load;
            }
            if (this.disk_usage != null) {
                data.disk_usage = this.disk_usage;
            }
            if (this.load_avg_1 != null) {
                data.load_avg_1 = this.load_avg_1;
            }
            if (this.load_avg_5 != null) {
                data.load_avg_5 = this.load_avg_5;
            }
            if (this.network_rx != null) {
                data.network_rx = this.network_rx;
            }
            if (this.network_tx != null) {
                data.network_tx = this.network_tx;
            }
            if (this.availability_probability != null) {
                data.availability_probability = this.availability_probability;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timestamp)
                writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.cpu_load != 0)
                writer.writeDouble(2, this.cpu_load);
            if (this.memory_load != 0)
                writer.writeDouble(3, this.memory_load);
            if (this.disk_usage != 0)
                writer.writeDouble(4, this.disk_usage);
            if (this.load_avg_1 != 0)
                writer.writeDouble(5, this.load_avg_1);
            if (this.load_avg_5 != 0)
                writer.writeDouble(6, this.load_avg_5);
            if (this.network_rx != 0)
                writer.writeDouble(7, this.network_rx);
            if (this.network_tx != 0)
                writer.writeDouble(8, this.network_tx);
            if (this.availability_probability != 0)
                writer.writeDouble(9, this.availability_probability);
            if (this.status.length)
                writer.writeString(10, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicForecastPoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicForecastPoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.cpu_load = reader.readDouble();
                        break;
                    case 3:
                        message.memory_load = reader.readDouble();
                        break;
                    case 4:
                        message.disk_usage = reader.readDouble();
                        break;
                    case 5:
                        message.load_avg_1 = reader.readDouble();
                        break;
                    case 6:
                        message.load_avg_5 = reader.readDouble();
                        break;
                    case 7:
                        message.network_rx = reader.readDouble();
                        break;
                    case 8:
                        message.network_tx = reader.readDouble();
                        break;
                    case 9:
                        message.availability_probability = reader.readDouble();
                        break;
                    case 10:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicForecastPoint {
            return PublicForecastPoint.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPublicForecastService {
        static definition = {
            ServerForecast: {
                path: "/public_api.PublicForecast/ServerForecast",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PublicForecastRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PublicForecastRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PublicForecastResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PublicForecastResponse.deserialize(new Uint8Array(bytes))
            },
            StreamServerForecast: {
                path: "/public_api.PublicForecast/StreamServerForecast",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: PublicForecastStreamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PublicForecastStreamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PublicForecastPoint) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PublicForecastPoint.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ServerForecast(call: grpc_1.ServerUnaryCall<PublicForecastRequest, PublicForecastResponse>, callback: grpc_1.sendUnaryData<PublicForecastResponse>): void;
        abstract StreamServerForecast(call: grpc_1.ServerWritableStream<PublicForecastStreamRequest, PublicForecastPoint>): void;
    }
    export class PublicForecastClient extends grpc_1.makeGenericClientConstructor(UnimplementedPublicForecastService.definition, "PublicForecast", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ServerForecast: GrpcUnaryServiceInterface<PublicForecastRequest, PublicForecastResponse> = (message: PublicForecastRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PublicForecastResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PublicForecastResponse>, callback?: grpc_1.requestCallback<PublicForecastResponse>): grpc_1.ClientUnaryCall => {
            return super.ServerForecast(message, metadata, options, callback);
        };
        StreamServerForecast: GrpcStreamServiceInterface<PublicForecastStreamRequest, PublicForecastPoint> = (message: PublicForecastStreamRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<PublicForecastPoint> => {
            return super.StreamServerForecast(message, metadata, options);
        };
    }
}
