// source: public-api/public-monitoring.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.public_api.PublicServerMetric', null, global);
goog.exportSymbol('proto.public_api.PublicServerMetricsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.public_api.PublicServerMetricsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.public_api.PublicServerMetricsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.public_api.PublicServerMetricsRequest.displayName = 'proto.public_api.PublicServerMetricsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.public_api.PublicServerMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.public_api.PublicServerMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.public_api.PublicServerMetric.displayName = 'proto.public_api.PublicServerMetric';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.public_api.PublicServerMetricsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.public_api.PublicServerMetricsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.public_api.PublicServerMetricsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.public_api.PublicServerMetricsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
serverId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.public_api.PublicServerMetricsRequest}
 */
proto.public_api.PublicServerMetricsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.public_api.PublicServerMetricsRequest;
  return proto.public_api.PublicServerMetricsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.public_api.PublicServerMetricsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.public_api.PublicServerMetricsRequest}
 */
proto.public_api.PublicServerMetricsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.public_api.PublicServerMetricsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.public_api.PublicServerMetricsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.public_api.PublicServerMetricsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.public_api.PublicServerMetricsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string server_id = 1;
 * @return {string}
 */
proto.public_api.PublicServerMetricsRequest.prototype.getServerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.public_api.PublicServerMetricsRequest} returns this
 */
proto.public_api.PublicServerMetricsRequest.prototype.setServerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.public_api.PublicServerMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.public_api.PublicServerMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.public_api.PublicServerMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.public_api.PublicServerMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
cpuUsage: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
memoryUsage: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
diskUsage: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
loadAvg1: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
loadAvg5: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
loadAvg15: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
networkRx: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
networkTx: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
diskRead: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
diskWrite: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
processCount: jspb.Message.getFieldWithDefault(msg, 11, 0),
ioWait: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
uptimeSeconds: jspb.Message.getFieldWithDefault(msg, 13, 0),
temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
status: jspb.Message.getFieldWithDefault(msg, 15, ""),
timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.public_api.PublicServerMetric}
 */
proto.public_api.PublicServerMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.public_api.PublicServerMetric;
  return proto.public_api.PublicServerMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.public_api.PublicServerMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.public_api.PublicServerMetric}
 */
proto.public_api.PublicServerMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCpuUsage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMemoryUsage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDiskUsage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLoadAvg1(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLoadAvg5(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLoadAvg15(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNetworkRx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNetworkTx(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDiskRead(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDiskWrite(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessCount(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIoWait(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUptimeSeconds(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemperature(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.public_api.PublicServerMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.public_api.PublicServerMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.public_api.PublicServerMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.public_api.PublicServerMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpuUsage();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMemoryUsage();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getDiskUsage();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLoadAvg1();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLoadAvg5();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getLoadAvg15();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getNetworkRx();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getNetworkTx();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getDiskRead();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getDiskWrite();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getProcessCount();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getIoWait();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getUptimeSeconds();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional double cpu_usage = 1;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getCpuUsage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setCpuUsage = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double memory_usage = 2;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getMemoryUsage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setMemoryUsage = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double disk_usage = 3;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getDiskUsage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setDiskUsage = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double load_avg_1 = 4;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getLoadAvg1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setLoadAvg1 = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double load_avg_5 = 5;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getLoadAvg5 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setLoadAvg5 = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double load_avg_15 = 6;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getLoadAvg15 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setLoadAvg15 = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double network_rx = 7;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getNetworkRx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setNetworkRx = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double network_tx = 8;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getNetworkTx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setNetworkTx = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double disk_read = 9;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getDiskRead = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setDiskRead = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double disk_write = 10;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getDiskWrite = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setDiskWrite = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional int32 process_count = 11;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getProcessCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setProcessCount = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional double io_wait = 12;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getIoWait = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setIoWait = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional int64 uptime_seconds = 13;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getUptimeSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setUptimeSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional double temperature = 14;
 * @return {number}
 */
proto.public_api.PublicServerMetric.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string status = 15;
 * @return {string}
 */
proto.public_api.PublicServerMetric.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.public_api.PublicServerMetric.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.public_api.PublicServerMetric} returns this
*/
proto.public_api.PublicServerMetric.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.public_api.PublicServerMetric} returns this
 */
proto.public_api.PublicServerMetric.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.public_api.PublicServerMetric.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 16) != null;
};


goog.object.extend(exports, proto.public_api);
