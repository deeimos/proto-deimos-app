// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/public-api/public-monitoring.proto (package public_api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message public_api.PublicServerMetricsRequest
 */
export class PublicServerMetricsRequest extends Message<PublicServerMetricsRequest> {
  /**
   * @generated from field: string server_id = 1;
   */
  serverId = "";

  constructor(data?: PartialMessage<PublicServerMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.PublicServerMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicServerMetricsRequest {
    return new PublicServerMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicServerMetricsRequest {
    return new PublicServerMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicServerMetricsRequest {
    return new PublicServerMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublicServerMetricsRequest | PlainMessage<PublicServerMetricsRequest> | undefined, b: PublicServerMetricsRequest | PlainMessage<PublicServerMetricsRequest> | undefined): boolean {
    return proto3.util.equals(PublicServerMetricsRequest, a, b);
  }
}

/**
 * @generated from message public_api.PublicServerMetric
 */
export class PublicServerMetric extends Message<PublicServerMetric> {
  /**
   * @generated from field: double cpu_usage = 1;
   */
  cpuUsage = 0;

  /**
   * @generated from field: double memory_usage = 2;
   */
  memoryUsage = 0;

  /**
   * @generated from field: double disk_usage = 3;
   */
  diskUsage = 0;

  /**
   * @generated from field: double load_avg_1 = 4;
   */
  loadAvg1 = 0;

  /**
   * @generated from field: double load_avg_5 = 5;
   */
  loadAvg5 = 0;

  /**
   * @generated from field: double load_avg_15 = 6;
   */
  loadAvg15 = 0;

  /**
   * @generated from field: double network_rx = 7;
   */
  networkRx = 0;

  /**
   * @generated from field: double network_tx = 8;
   */
  networkTx = 0;

  /**
   * @generated from field: double disk_read = 9;
   */
  diskRead = 0;

  /**
   * @generated from field: double disk_write = 10;
   */
  diskWrite = 0;

  /**
   * @generated from field: int32 process_count = 11;
   */
  processCount = 0;

  /**
   * @generated from field: double io_wait = 12;
   */
  ioWait = 0;

  /**
   * @generated from field: int64 uptime_seconds = 13;
   */
  uptimeSeconds = protoInt64.zero;

  /**
   * @generated from field: double temperature = 14;
   */
  temperature = 0;

  /**
   * @generated from field: string status = 15;
   */
  status = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 16;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<PublicServerMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.PublicServerMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu_usage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "memory_usage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "disk_usage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "load_avg_1", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "load_avg_5", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "load_avg_15", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "network_rx", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "network_tx", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "disk_read", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "disk_write", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "process_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "io_wait", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "uptime_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "temperature", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 15, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicServerMetric {
    return new PublicServerMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicServerMetric {
    return new PublicServerMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicServerMetric {
    return new PublicServerMetric().fromJsonString(jsonString, options);
  }

  static equals(a: PublicServerMetric | PlainMessage<PublicServerMetric> | undefined, b: PublicServerMetric | PlainMessage<PublicServerMetric> | undefined): boolean {
    return proto3.util.equals(PublicServerMetric, a, b);
  }
}

