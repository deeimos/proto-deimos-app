// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/public-api/public-forecast.proto (package public_api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message public_api.PublicForecastRequest
 */
export class PublicForecastRequest extends Message<PublicForecastRequest> {
  /**
   * @generated from field: string server_id = 1;
   */
  serverId = "";

  constructor(data?: PartialMessage<PublicForecastRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.PublicForecastRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicForecastRequest {
    return new PublicForecastRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicForecastRequest {
    return new PublicForecastRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicForecastRequest {
    return new PublicForecastRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublicForecastRequest | PlainMessage<PublicForecastRequest> | undefined, b: PublicForecastRequest | PlainMessage<PublicForecastRequest> | undefined): boolean {
    return proto3.util.equals(PublicForecastRequest, a, b);
  }
}

/**
 * @generated from message public_api.PublicForecastResponse
 */
export class PublicForecastResponse extends Message<PublicForecastResponse> {
  /**
   * @generated from field: string server_id = 1;
   */
  serverId = "";

  /**
   * @generated from field: repeated public_api.PublicForecastPoint forecasts = 2;
   */
  forecasts: PublicForecastPoint[] = [];

  constructor(data?: PartialMessage<PublicForecastResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.PublicForecastResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "forecasts", kind: "message", T: PublicForecastPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicForecastResponse {
    return new PublicForecastResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicForecastResponse {
    return new PublicForecastResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicForecastResponse {
    return new PublicForecastResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublicForecastResponse | PlainMessage<PublicForecastResponse> | undefined, b: PublicForecastResponse | PlainMessage<PublicForecastResponse> | undefined): boolean {
    return proto3.util.equals(PublicForecastResponse, a, b);
  }
}

/**
 * @generated from message public_api.PublicForecastStreamRequest
 */
export class PublicForecastStreamRequest extends Message<PublicForecastStreamRequest> {
  /**
   * @generated from field: string server_id = 1;
   */
  serverId = "";

  constructor(data?: PartialMessage<PublicForecastStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.PublicForecastStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicForecastStreamRequest {
    return new PublicForecastStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicForecastStreamRequest {
    return new PublicForecastStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicForecastStreamRequest {
    return new PublicForecastStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublicForecastStreamRequest | PlainMessage<PublicForecastStreamRequest> | undefined, b: PublicForecastStreamRequest | PlainMessage<PublicForecastStreamRequest> | undefined): boolean {
    return proto3.util.equals(PublicForecastStreamRequest, a, b);
  }
}

/**
 * @generated from message public_api.PublicForecastPoint
 */
export class PublicForecastPoint extends Message<PublicForecastPoint> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: double cpu_load = 2;
   */
  cpuLoad = 0;

  /**
   * @generated from field: double memory_load = 3;
   */
  memoryLoad = 0;

  /**
   * @generated from field: double disk_usage = 4;
   */
  diskUsage = 0;

  /**
   * @generated from field: double load_avg_1 = 5;
   */
  loadAvg1 = 0;

  /**
   * @generated from field: double load_avg_5 = 6;
   */
  loadAvg5 = 0;

  /**
   * @generated from field: double network_rx = 7;
   */
  networkRx = 0;

  /**
   * @generated from field: double network_tx = 8;
   */
  networkTx = 0;

  /**
   * @generated from field: double availability_probability = 9;
   */
  availabilityProbability = 0;

  constructor(data?: PartialMessage<PublicForecastPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "public_api.PublicForecastPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "cpu_load", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "memory_load", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "disk_usage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "load_avg_1", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "load_avg_5", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "network_rx", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "network_tx", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "availability_probability", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicForecastPoint {
    return new PublicForecastPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicForecastPoint {
    return new PublicForecastPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicForecastPoint {
    return new PublicForecastPoint().fromJsonString(jsonString, options);
  }

  static equals(a: PublicForecastPoint | PlainMessage<PublicForecastPoint> | undefined, b: PublicForecastPoint | PlainMessage<PublicForecastPoint> | undefined): boolean {
    return proto3.util.equals(PublicForecastPoint, a, b);
  }
}

