/**
 * @fileoverview gRPC-Web generated client stub for public_api
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: public-api/public-servers.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as public$api_public$servers_pb from '../public-api/public-servers_pb'; // proto import: "public-api/public-servers.proto"


export class PublicServersClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateServer = new grpcWeb.MethodDescriptor(
    '/public_api.PublicServers/CreateServer',
    grpcWeb.MethodType.UNARY,
    public$api_public$servers_pb.CreateServerRequest,
    public$api_public$servers_pb.CreateServerResponse,
    (request: public$api_public$servers_pb.CreateServerRequest) => {
      return request.serializeBinary();
    },
    public$api_public$servers_pb.CreateServerResponse.deserializeBinary
  );

  createServer(
    request: public$api_public$servers_pb.CreateServerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<public$api_public$servers_pb.CreateServerResponse>;

  createServer(
    request: public$api_public$servers_pb.CreateServerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.CreateServerResponse) => void): grpcWeb.ClientReadableStream<public$api_public$servers_pb.CreateServerResponse>;

  createServer(
    request: public$api_public$servers_pb.CreateServerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.CreateServerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/public_api.PublicServers/CreateServer',
        request,
        metadata || {},
        this.methodDescriptorCreateServer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/public_api.PublicServers/CreateServer',
    request,
    metadata || {},
    this.methodDescriptorCreateServer);
  }

  methodDescriptorUpdateServer = new grpcWeb.MethodDescriptor(
    '/public_api.PublicServers/UpdateServer',
    grpcWeb.MethodType.UNARY,
    public$api_public$servers_pb.UpdateServerRequest,
    public$api_public$servers_pb.UpdateServerResponse,
    (request: public$api_public$servers_pb.UpdateServerRequest) => {
      return request.serializeBinary();
    },
    public$api_public$servers_pb.UpdateServerResponse.deserializeBinary
  );

  updateServer(
    request: public$api_public$servers_pb.UpdateServerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<public$api_public$servers_pb.UpdateServerResponse>;

  updateServer(
    request: public$api_public$servers_pb.UpdateServerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.UpdateServerResponse) => void): grpcWeb.ClientReadableStream<public$api_public$servers_pb.UpdateServerResponse>;

  updateServer(
    request: public$api_public$servers_pb.UpdateServerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.UpdateServerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/public_api.PublicServers/UpdateServer',
        request,
        metadata || {},
        this.methodDescriptorUpdateServer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/public_api.PublicServers/UpdateServer',
    request,
    metadata || {},
    this.methodDescriptorUpdateServer);
  }

  methodDescriptorGetServer = new grpcWeb.MethodDescriptor(
    '/public_api.PublicServers/GetServer',
    grpcWeb.MethodType.UNARY,
    public$api_public$servers_pb.GetServerRequest,
    public$api_public$servers_pb.GetServerResponse,
    (request: public$api_public$servers_pb.GetServerRequest) => {
      return request.serializeBinary();
    },
    public$api_public$servers_pb.GetServerResponse.deserializeBinary
  );

  getServer(
    request: public$api_public$servers_pb.GetServerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<public$api_public$servers_pb.GetServerResponse>;

  getServer(
    request: public$api_public$servers_pb.GetServerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.GetServerResponse) => void): grpcWeb.ClientReadableStream<public$api_public$servers_pb.GetServerResponse>;

  getServer(
    request: public$api_public$servers_pb.GetServerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.GetServerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/public_api.PublicServers/GetServer',
        request,
        metadata || {},
        this.methodDescriptorGetServer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/public_api.PublicServers/GetServer',
    request,
    metadata || {},
    this.methodDescriptorGetServer);
  }

  methodDescriptorGetServersList = new grpcWeb.MethodDescriptor(
    '/public_api.PublicServers/GetServersList',
    grpcWeb.MethodType.UNARY,
    public$api_public$servers_pb.GetServersListRequest,
    public$api_public$servers_pb.GetServersListResponse,
    (request: public$api_public$servers_pb.GetServersListRequest) => {
      return request.serializeBinary();
    },
    public$api_public$servers_pb.GetServersListResponse.deserializeBinary
  );

  getServersList(
    request: public$api_public$servers_pb.GetServersListRequest,
    metadata?: grpcWeb.Metadata | null): Promise<public$api_public$servers_pb.GetServersListResponse>;

  getServersList(
    request: public$api_public$servers_pb.GetServersListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.GetServersListResponse) => void): grpcWeb.ClientReadableStream<public$api_public$servers_pb.GetServersListResponse>;

  getServersList(
    request: public$api_public$servers_pb.GetServersListRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: public$api_public$servers_pb.GetServersListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/public_api.PublicServers/GetServersList',
        request,
        metadata || {},
        this.methodDescriptorGetServersList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/public_api.PublicServers/GetServersList',
    request,
    metadata || {},
    this.methodDescriptorGetServersList);
  }

}

